[[https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319106919344c4ef8b1e04c48778bb45796e0335839000][廖雪峰 使用元类]]

* type()函数
   动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是在运行时动态创建的。
   type() 函数可以查看一个类型或变量的类型，还可以运行时动态创建 class 的定义。

* metaclass
   可以通过定义 metaclass，用 metaclass 来创建类的定义，在通过类定义来创建实例。
   换句话说，可以把类理解为 metaclass 创建出来的“实例”。

   在子类的定义时会执行 metaclass 的 __new__(cls, name, based, attrs) 方法。
   而 __init__ 方法会在生成子类实例之后执行。也就是说如果 __new__() 没有返回子类实例时，__init__() 不会执行。
   当 __new__() 返回子类实例时，会执行 __init__() 方法。

   #+begin_src ipython
class Field(object):
    def __init__(self, name, column_type):
        print('field init')
        self.name = name
        self.column_type = column_type

    def __str__(self):
        return '<%s:%s">' % (self.__class__.__name__, self.name)


class StringField(Field):
    def __init__(self, name):
        print('StringField init')
        super(StringField, self).__init__(name, 'varchar(100)')


class IntergerField(Field):
    def __init__(self, name):
        print('IntergerField init')
        super(IntergerField, self).__init__(name, 'bigint')


class ModelMetaclass(type):
    def __new__(cls, name, bases, attrs):
        if name == 'Model':
            return type.__new__(cls, name, bases, attrs)
        print('Found model: %s' % name)
        mappings = dict()
        for k, v in attrs.items():
            if isinstance(v, Field):
                print('Found mapping : %s ==> %s' % (k, v))
                mappings[k] = v
        for k in mappings.keys():
            attrs.pop(k)
        attrs['__mappings__'] = mappings
        attrs['__table__'] = name
        return type.__new__(cls, name, bases, attrs)


class Model(dict, metaclass=ModelMetaclass):
    def __init__(self, **kw):
        print('Model init')
        super(Model, self).__init__(**kw)

    def __getattr__(self, key):
        print('Mode __getattr__')
        try:
            return self[key]
        except KeyError:
            raise AttributeError(r"'Model' Object has no attribute '%s'" % key)

    def __setattr__(self, key, value):
        print('Model __setattr__')
        self[key] = value

    def save(self):
        print('Model save')
        fields = []
        params = []
        args = []
        for k, v in self.__mappings__.items():
            fields.append(v.name)
            params.append('?')
            args.append(getattr(self, k, None))

        sql = 'insert into %s (%s) values (%s)' % (
            self.__table__, ','.join(fields), ','.join(params))
        print('SQL: %s' % sql)
        print('Args: %s' % str(args))


class User(Model):
    id = IntergerField('id')
    name = StringField('username')
    email = StringField('email')
    password = StringField('password')


u = User(id=1234, name='Micheal', email='test@orm.org', password='my-pwd')
u.save()

   #+end_src

   #+RESULTS:
   : # Out[1]:


